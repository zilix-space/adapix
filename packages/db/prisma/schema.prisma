// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  username      String?
  settings      Json?

  role   UserRole   @default(USER)
  status UserStatus @default(PENDING)

  accounts     Account[]
  sessions     Session[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TransactionStatus {
  PENDING_DEPOSIT
  PENDING_EXCHANGE
  PENDING_PAYMENT
  COMPLETED
  EXPIRED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

model Transaction {
  id String @id @default(uuid())

  status TransactionStatus
  type   TransactionType

  fromAmount Float
  toAmount   Float

  fromCurrency String
  toCurrency   String

  exchangeId      String @unique
  exchangeAddress String

  paymentId      String @unique
  paymentAddress String

  addressToReceive String

  completedAt DateTime?
  expiresAt   DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
